//객체지향 설명 링크
//https://xangmin.tistory.com/152

//*객체지향이란?
//객체지양 프로그래밍(Object Oriented Programming, OOP)
//-필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고,
//객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법

//*장점
//상속을 통한 [코드 재사용 용이]
//캡슐화를 통한 [유지보수의 우수성]
//대형 프로젝트 적합

//*단점
//객체가 처리하려는 것에 대한 정확한 이해가 필요하므로 [개발속도가 느림]
//[실행속도가 느림]
//다중 상속과 같은 이유로 복잡도가 상승하여 [코딩 난이도 상승]


//*OOP의 4가지 특징
//1)캡슐화: 데이터와 코드의 형태를 외부로부터 알 수 없게하고, 데이터의
//구조와 역할, 기능을 하나의 캡슐 형태로 만드는 방법(정보를 숨김)
//*캡슐화 방법
//-멤버 변수 앞에 접근 제어자 private를 붙임
//-멤버 변수에 값을 넣고 꺼내 올 수 있는 메서드를 만듬(set/get 사용)

//2)추상화: 클래스들의 공통적인 특성(변수, 매소드)들을 묶어 표현하는 것

//3)상속화: 부모 클래스에 정의된 변수 및 메서드를 자식 클래스에서 상속받아
//사용하는 것

//4)다형화: 다양한 형태로 표현이 가능한 구조물
//*다형화 지원 방법
//-오버로딩: 하나의 클래스 안에서 같은 이름의 메서드를 여러 개 정의 하는 것
//-오버라이딩: 부모 클래스로부터 상속받은 메서드 내용을 변경하여 사용하는 것


//*OOP의 5가지 원칙
//1)단일 책임 원칙(SRP): 한 클래스는 하나의 책임만 가진다.
//2)개방 폐쇄 원칙(OCP): 확장에는 열려 있으나, 변경에는 닫혀있어야한다.
//3)리스코프 치환 원칙(LSP): 프로그램의 객체는 프로그램의 정확성을 깨뜨리지
//않으면서 하위 타입의 인스턴스로 바꿀 수 있어야한다.
//4)인터페이스 분리 원칙(ISP): 특정 클라이언트를 위한 인터페이스 여러 개가
//범용 인터페이스 하나보다 낫다.
//5)의존관계 역전 원칙(DIP): 추상화에 의존하고, 구체화에 의존하지 않는다.













